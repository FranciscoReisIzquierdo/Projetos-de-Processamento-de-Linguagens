Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> ply
Rule 1     ply -> commentary
Rule 2     ply -> section
Rule 3     ply -> atribution
Rule 4     ply -> atribution commentary
Rule 5     ply -> lex
Rule 6     ply -> lex commentary
Rule 7     ply -> yacc
Rule 8     ply -> yacc commentary
Rule 9     ply -> python
Rule 10    ply -> <empty>
Rule 11    commentary -> Comment Info END
Rule 12    section -> Section END
Rule 13    atribution -> Id = exp
Rule 14    atribution -> Id = Chars
Rule 15    atribution -> Id = list
Rule 16    atribution -> Id = dic
Rule 17    atribution -> Index = exp
Rule 18    atribution -> Index = Chars
Rule 19    atribution -> Index = list
Rule 20    atribution -> Index = dic
Rule 21    atribution -> Index = Index
Rule 22    exp -> Value
Rule 23    exp -> exp + Value
Rule 24    exp -> exp - Value
Rule 25    exp -> exp / Value
Rule 26    exp -> exp * Value
Rule 27    exp -> - Value
Rule 28    lex -> regex
Rule 29    lex -> reservedWordsLex
Rule 30    lex -> erro
Rule 31    regex -> Regex Return regexTuple
Rule 32    reservedWordsLex -> Tokens = list
Rule 33    reservedWordsLex -> Literals = list
Rule 34    reservedWordsLex -> Literals = Chars
Rule 35    reservedWordsLex -> Ignore = Chars
Rule 36    erro -> . reservedFunctions
Rule 37    reservedFunctions -> Error Info END
Rule 38    yacc -> reservedWordsYacc
Rule 39    yacc -> productions
Rule 40    reservedWordsYacc -> Precedence = listOfTuples
Rule 41    productions -> Id : production Info
Rule 42    productions -> Id : production
Rule 43    python -> Python
Rule 44    python -> Info
Rule 45    list -> [ Empty ]
Rule 46    list -> [ elems ]
Rule 47    listOfTuples -> [ precs ]
Rule 48    precs -> ( tupleforPrec )
Rule 49    precs -> precs , ( tupleforPrec )
Rule 50    tupleforPrec -> ' Left ' , elems
Rule 51    tupleforPrec -> ' Right ' , elems
Rule 52    regexTuple -> ( ' Id ' , Tvalue )
Rule 53    dic -> { Empty }
Rule 54    dic -> { conj }
Rule 55    conj -> Value : Value
Rule 56    conj -> Chars : Chars
Rule 57    conj -> Value : Chars
Rule 58    conj -> Chars : Value
Rule 59    conj -> conj , Value : Value
Rule 60    conj -> conj , Chars : Chars
Rule 61    conj -> conj , Value : Chars
Rule 62    conj -> conj , Chars : Value
Rule 63    production -> < items >
Rule 64    items -> Id
Rule 65    items -> items Id
Rule 66    items -> Chars
Rule 67    items -> items Chars
Rule 68    elems -> ' Id '
Rule 69    elems -> elems , ' Id '
Rule 70    elems -> Chars
Rule 71    elems -> elems , Chars
Rule 72    Empty -> <empty>

Terminals, with rules where they appear

'                    : 50 50 51 51 52 52 68 68 69 69
(                    : 48 49 52
)                    : 48 49 52
*                    : 26
+                    : 23
,                    : 49 50 51 52 59 60 61 62 69 71
-                    : 24 27
.                    : 36
/                    : 25
:                    : 41 42 55 56 57 58 59 60 61 62
<                    : 63
=                    : 13 14 15 16 17 18 19 20 21 32 33 34 35 40
>                    : 63
Chars                : 14 18 34 35 56 56 57 58 60 60 61 62 66 67 70 71
Comment              : 11
END                  : 11 12 37
Error                : 37
Id                   : 13 14 15 16 41 42 52 64 65 68 69
Ignore               : 35
Index                : 17 18 19 20 21 21
Info                 : 11 37 41 44
Left                 : 50
Literals             : 33 34
Precedence           : 40
Python               : 43
Regex                : 31
Return               : 31
Right                : 51
Section              : 12
Tokens               : 32
Tvalue               : 52
Value                : 22 23 24 25 26 27 55 55 57 58 59 59 61 62
[                    : 45 46 47
]                    : 45 46 47
error                : 
{                    : 53 54
}                    : 53 54

Nonterminals, with rules where they appear

Empty                : 45 53
atribution           : 3 4
commentary           : 1 4 6 8
conj                 : 54 59 60 61 62
dic                  : 16 20
elems                : 46 50 51 69 71
erro                 : 30
exp                  : 13 17 23 24 25 26
items                : 63 65 67
lex                  : 5 6
list                 : 15 19 32 33
listOfTuples         : 40
ply                  : 0
precs                : 47 49
production           : 41 42
productions          : 39
python               : 9
regex                : 28
regexTuple           : 31
reservedFunctions    : 36
reservedWordsLex     : 29
reservedWordsYacc    : 38
section              : 2
tupleforPrec         : 48 49
yacc                 : 7 8

Parsing method: LALR

state 0

    (0) S' -> . ply
    (1) ply -> . commentary
    (2) ply -> . section
    (3) ply -> . atribution
    (4) ply -> . atribution commentary
    (5) ply -> . lex
    (6) ply -> . lex commentary
    (7) ply -> . yacc
    (8) ply -> . yacc commentary
    (9) ply -> . python
    (10) ply -> .
    (11) commentary -> . Comment Info END
    (12) section -> . Section END
    (13) atribution -> . Id = exp
    (14) atribution -> . Id = Chars
    (15) atribution -> . Id = list
    (16) atribution -> . Id = dic
    (17) atribution -> . Index = exp
    (18) atribution -> . Index = Chars
    (19) atribution -> . Index = list
    (20) atribution -> . Index = dic
    (21) atribution -> . Index = Index
    (28) lex -> . regex
    (29) lex -> . reservedWordsLex
    (30) lex -> . erro
    (38) yacc -> . reservedWordsYacc
    (39) yacc -> . productions
    (43) python -> . Python
    (44) python -> . Info
    (31) regex -> . Regex Return regexTuple
    (32) reservedWordsLex -> . Tokens = list
    (33) reservedWordsLex -> . Literals = list
    (34) reservedWordsLex -> . Literals = Chars
    (35) reservedWordsLex -> . Ignore = Chars
    (36) erro -> . . reservedFunctions
    (40) reservedWordsYacc -> . Precedence = listOfTuples
    (41) productions -> . Id : production Info
    (42) productions -> . Id : production

    $end            reduce using rule 10 (ply -> .)
    Comment         shift and go to state 8
    Section         shift and go to state 10
    Id              shift and go to state 11
    Index           shift and go to state 12
    Python          shift and go to state 18
    Info            shift and go to state 9
    Regex           shift and go to state 19
    Tokens          shift and go to state 20
    Literals        shift and go to state 21
    Ignore          shift and go to state 22
    .               shift and go to state 23
    Precedence      shift and go to state 24

    ply                            shift and go to state 1
    commentary                     shift and go to state 2
    section                        shift and go to state 3
    atribution                     shift and go to state 4
    lex                            shift and go to state 5
    yacc                           shift and go to state 6
    python                         shift and go to state 7
    regex                          shift and go to state 13
    reservedWordsLex               shift and go to state 14
    erro                           shift and go to state 15
    reservedWordsYacc              shift and go to state 16
    productions                    shift and go to state 17

state 1

    (0) S' -> ply .



state 2

    (1) ply -> commentary .

    $end            reduce using rule 1 (ply -> commentary .)


state 3

    (2) ply -> section .

    $end            reduce using rule 2 (ply -> section .)


state 4

    (3) ply -> atribution .
    (4) ply -> atribution . commentary
    (11) commentary -> . Comment Info END

    $end            reduce using rule 3 (ply -> atribution .)
    Comment         shift and go to state 8

    commentary                     shift and go to state 25

state 5

    (5) ply -> lex .
    (6) ply -> lex . commentary
    (11) commentary -> . Comment Info END

    $end            reduce using rule 5 (ply -> lex .)
    Comment         shift and go to state 8

    commentary                     shift and go to state 26

state 6

    (7) ply -> yacc .
    (8) ply -> yacc . commentary
    (11) commentary -> . Comment Info END

    $end            reduce using rule 7 (ply -> yacc .)
    Comment         shift and go to state 8

    commentary                     shift and go to state 27

state 7

    (9) ply -> python .

    $end            reduce using rule 9 (ply -> python .)


state 8

    (11) commentary -> Comment . Info END

    Info            shift and go to state 28


state 9

    (44) python -> Info .

    $end            reduce using rule 44 (python -> Info .)


state 10

    (12) section -> Section . END

    END             shift and go to state 29


state 11

    (13) atribution -> Id . = exp
    (14) atribution -> Id . = Chars
    (15) atribution -> Id . = list
    (16) atribution -> Id . = dic
    (41) productions -> Id . : production Info
    (42) productions -> Id . : production

    =               shift and go to state 30
    :               shift and go to state 31


state 12

    (17) atribution -> Index . = exp
    (18) atribution -> Index . = Chars
    (19) atribution -> Index . = list
    (20) atribution -> Index . = dic
    (21) atribution -> Index . = Index

    =               shift and go to state 32


state 13

    (28) lex -> regex .

    Comment         reduce using rule 28 (lex -> regex .)
    $end            reduce using rule 28 (lex -> regex .)


state 14

    (29) lex -> reservedWordsLex .

    Comment         reduce using rule 29 (lex -> reservedWordsLex .)
    $end            reduce using rule 29 (lex -> reservedWordsLex .)


state 15

    (30) lex -> erro .

    Comment         reduce using rule 30 (lex -> erro .)
    $end            reduce using rule 30 (lex -> erro .)


state 16

    (38) yacc -> reservedWordsYacc .

    Comment         reduce using rule 38 (yacc -> reservedWordsYacc .)
    $end            reduce using rule 38 (yacc -> reservedWordsYacc .)


state 17

    (39) yacc -> productions .

    Comment         reduce using rule 39 (yacc -> productions .)
    $end            reduce using rule 39 (yacc -> productions .)


state 18

    (43) python -> Python .

    $end            reduce using rule 43 (python -> Python .)


state 19

    (31) regex -> Regex . Return regexTuple

    Return          shift and go to state 33


state 20

    (32) reservedWordsLex -> Tokens . = list

    =               shift and go to state 34


state 21

    (33) reservedWordsLex -> Literals . = list
    (34) reservedWordsLex -> Literals . = Chars

    =               shift and go to state 35


state 22

    (35) reservedWordsLex -> Ignore . = Chars

    =               shift and go to state 36


state 23

    (36) erro -> . . reservedFunctions
    (37) reservedFunctions -> . Error Info END

    Error           shift and go to state 38

    reservedFunctions              shift and go to state 37

state 24

    (40) reservedWordsYacc -> Precedence . = listOfTuples

    =               shift and go to state 39


state 25

    (4) ply -> atribution commentary .

    $end            reduce using rule 4 (ply -> atribution commentary .)


state 26

    (6) ply -> lex commentary .

    $end            reduce using rule 6 (ply -> lex commentary .)


state 27

    (8) ply -> yacc commentary .

    $end            reduce using rule 8 (ply -> yacc commentary .)


state 28

    (11) commentary -> Comment Info . END

    END             shift and go to state 40


state 29

    (12) section -> Section END .

    $end            reduce using rule 12 (section -> Section END .)


state 30

    (13) atribution -> Id = . exp
    (14) atribution -> Id = . Chars
    (15) atribution -> Id = . list
    (16) atribution -> Id = . dic
    (22) exp -> . Value
    (23) exp -> . exp + Value
    (24) exp -> . exp - Value
    (25) exp -> . exp / Value
    (26) exp -> . exp * Value
    (27) exp -> . - Value
    (45) list -> . [ Empty ]
    (46) list -> . [ elems ]
    (53) dic -> . { Empty }
    (54) dic -> . { conj }

    Chars           shift and go to state 42
    Value           shift and go to state 45
    -               shift and go to state 46
    [               shift and go to state 47
    {               shift and go to state 48

    exp                            shift and go to state 41
    list                           shift and go to state 43
    dic                            shift and go to state 44

state 31

    (41) productions -> Id : . production Info
    (42) productions -> Id : . production
    (63) production -> . < items >

    <               shift and go to state 50

    production                     shift and go to state 49

state 32

    (17) atribution -> Index = . exp
    (18) atribution -> Index = . Chars
    (19) atribution -> Index = . list
    (20) atribution -> Index = . dic
    (21) atribution -> Index = . Index
    (22) exp -> . Value
    (23) exp -> . exp + Value
    (24) exp -> . exp - Value
    (25) exp -> . exp / Value
    (26) exp -> . exp * Value
    (27) exp -> . - Value
    (45) list -> . [ Empty ]
    (46) list -> . [ elems ]
    (53) dic -> . { Empty }
    (54) dic -> . { conj }

    Chars           shift and go to state 53
    Index           shift and go to state 51
    Value           shift and go to state 45
    -               shift and go to state 46
    [               shift and go to state 47
    {               shift and go to state 48

    exp                            shift and go to state 52
    list                           shift and go to state 54
    dic                            shift and go to state 55

state 33

    (31) regex -> Regex Return . regexTuple
    (52) regexTuple -> . ( ' Id ' , Tvalue )

    (               shift and go to state 57

    regexTuple                     shift and go to state 56

state 34

    (32) reservedWordsLex -> Tokens = . list
    (45) list -> . [ Empty ]
    (46) list -> . [ elems ]

    [               shift and go to state 47

    list                           shift and go to state 58

state 35

    (33) reservedWordsLex -> Literals = . list
    (34) reservedWordsLex -> Literals = . Chars
    (45) list -> . [ Empty ]
    (46) list -> . [ elems ]

    Chars           shift and go to state 60
    [               shift and go to state 47

    list                           shift and go to state 59

state 36

    (35) reservedWordsLex -> Ignore = . Chars

    Chars           shift and go to state 61


state 37

    (36) erro -> . reservedFunctions .

    Comment         reduce using rule 36 (erro -> . reservedFunctions .)
    $end            reduce using rule 36 (erro -> . reservedFunctions .)


state 38

    (37) reservedFunctions -> Error . Info END

    Info            shift and go to state 62


state 39

    (40) reservedWordsYacc -> Precedence = . listOfTuples
    (47) listOfTuples -> . [ precs ]

    [               shift and go to state 64

    listOfTuples                   shift and go to state 63

state 40

    (11) commentary -> Comment Info END .

    $end            reduce using rule 11 (commentary -> Comment Info END .)


state 41

    (13) atribution -> Id = exp .
    (23) exp -> exp . + Value
    (24) exp -> exp . - Value
    (25) exp -> exp . / Value
    (26) exp -> exp . * Value

    Comment         reduce using rule 13 (atribution -> Id = exp .)
    $end            reduce using rule 13 (atribution -> Id = exp .)
    +               shift and go to state 65
    -               shift and go to state 66
    /               shift and go to state 67
    *               shift and go to state 68


state 42

    (14) atribution -> Id = Chars .

    Comment         reduce using rule 14 (atribution -> Id = Chars .)
    $end            reduce using rule 14 (atribution -> Id = Chars .)


state 43

    (15) atribution -> Id = list .

    Comment         reduce using rule 15 (atribution -> Id = list .)
    $end            reduce using rule 15 (atribution -> Id = list .)


state 44

    (16) atribution -> Id = dic .

    Comment         reduce using rule 16 (atribution -> Id = dic .)
    $end            reduce using rule 16 (atribution -> Id = dic .)


state 45

    (22) exp -> Value .

    +               reduce using rule 22 (exp -> Value .)
    -               reduce using rule 22 (exp -> Value .)
    /               reduce using rule 22 (exp -> Value .)
    *               reduce using rule 22 (exp -> Value .)
    Comment         reduce using rule 22 (exp -> Value .)
    $end            reduce using rule 22 (exp -> Value .)


state 46

    (27) exp -> - . Value

    Value           shift and go to state 69


state 47

    (45) list -> [ . Empty ]
    (46) list -> [ . elems ]
    (72) Empty -> .
    (68) elems -> . ' Id '
    (69) elems -> . elems , ' Id '
    (70) elems -> . Chars
    (71) elems -> . elems , Chars

    ]               reduce using rule 72 (Empty -> .)
    '               shift and go to state 72
    Chars           shift and go to state 73

    Empty                          shift and go to state 70
    elems                          shift and go to state 71

state 48

    (53) dic -> { . Empty }
    (54) dic -> { . conj }
    (72) Empty -> .
    (55) conj -> . Value : Value
    (56) conj -> . Chars : Chars
    (57) conj -> . Value : Chars
    (58) conj -> . Chars : Value
    (59) conj -> . conj , Value : Value
    (60) conj -> . conj , Chars : Chars
    (61) conj -> . conj , Value : Chars
    (62) conj -> . conj , Chars : Value

    }               reduce using rule 72 (Empty -> .)
    Value           shift and go to state 76
    Chars           shift and go to state 77

    Empty                          shift and go to state 74
    conj                           shift and go to state 75

state 49

    (41) productions -> Id : production . Info
    (42) productions -> Id : production .

    Info            shift and go to state 78
    Comment         reduce using rule 42 (productions -> Id : production .)
    $end            reduce using rule 42 (productions -> Id : production .)


state 50

    (63) production -> < . items >
    (64) items -> . Id
    (65) items -> . items Id
    (66) items -> . Chars
    (67) items -> . items Chars

    Id              shift and go to state 80
    Chars           shift and go to state 81

    items                          shift and go to state 79

state 51

    (21) atribution -> Index = Index .

    Comment         reduce using rule 21 (atribution -> Index = Index .)
    $end            reduce using rule 21 (atribution -> Index = Index .)


state 52

    (17) atribution -> Index = exp .
    (23) exp -> exp . + Value
    (24) exp -> exp . - Value
    (25) exp -> exp . / Value
    (26) exp -> exp . * Value

    Comment         reduce using rule 17 (atribution -> Index = exp .)
    $end            reduce using rule 17 (atribution -> Index = exp .)
    +               shift and go to state 65
    -               shift and go to state 66
    /               shift and go to state 67
    *               shift and go to state 68


state 53

    (18) atribution -> Index = Chars .

    Comment         reduce using rule 18 (atribution -> Index = Chars .)
    $end            reduce using rule 18 (atribution -> Index = Chars .)


state 54

    (19) atribution -> Index = list .

    Comment         reduce using rule 19 (atribution -> Index = list .)
    $end            reduce using rule 19 (atribution -> Index = list .)


state 55

    (20) atribution -> Index = dic .

    Comment         reduce using rule 20 (atribution -> Index = dic .)
    $end            reduce using rule 20 (atribution -> Index = dic .)


state 56

    (31) regex -> Regex Return regexTuple .

    Comment         reduce using rule 31 (regex -> Regex Return regexTuple .)
    $end            reduce using rule 31 (regex -> Regex Return regexTuple .)


state 57

    (52) regexTuple -> ( . ' Id ' , Tvalue )

    '               shift and go to state 82


state 58

    (32) reservedWordsLex -> Tokens = list .

    Comment         reduce using rule 32 (reservedWordsLex -> Tokens = list .)
    $end            reduce using rule 32 (reservedWordsLex -> Tokens = list .)


state 59

    (33) reservedWordsLex -> Literals = list .

    Comment         reduce using rule 33 (reservedWordsLex -> Literals = list .)
    $end            reduce using rule 33 (reservedWordsLex -> Literals = list .)


state 60

    (34) reservedWordsLex -> Literals = Chars .

    Comment         reduce using rule 34 (reservedWordsLex -> Literals = Chars .)
    $end            reduce using rule 34 (reservedWordsLex -> Literals = Chars .)


state 61

    (35) reservedWordsLex -> Ignore = Chars .

    Comment         reduce using rule 35 (reservedWordsLex -> Ignore = Chars .)
    $end            reduce using rule 35 (reservedWordsLex -> Ignore = Chars .)


state 62

    (37) reservedFunctions -> Error Info . END

    END             shift and go to state 83


state 63

    (40) reservedWordsYacc -> Precedence = listOfTuples .

    Comment         reduce using rule 40 (reservedWordsYacc -> Precedence = listOfTuples .)
    $end            reduce using rule 40 (reservedWordsYacc -> Precedence = listOfTuples .)


state 64

    (47) listOfTuples -> [ . precs ]
    (48) precs -> . ( tupleforPrec )
    (49) precs -> . precs , ( tupleforPrec )

    (               shift and go to state 85

    precs                          shift and go to state 84

state 65

    (23) exp -> exp + . Value

    Value           shift and go to state 86


state 66

    (24) exp -> exp - . Value

    Value           shift and go to state 87


state 67

    (25) exp -> exp / . Value

    Value           shift and go to state 88


state 68

    (26) exp -> exp * . Value

    Value           shift and go to state 89


state 69

    (27) exp -> - Value .

    +               reduce using rule 27 (exp -> - Value .)
    -               reduce using rule 27 (exp -> - Value .)
    /               reduce using rule 27 (exp -> - Value .)
    *               reduce using rule 27 (exp -> - Value .)
    Comment         reduce using rule 27 (exp -> - Value .)
    $end            reduce using rule 27 (exp -> - Value .)


state 70

    (45) list -> [ Empty . ]

    ]               shift and go to state 90


state 71

    (46) list -> [ elems . ]
    (69) elems -> elems . , ' Id '
    (71) elems -> elems . , Chars

    ]               shift and go to state 91
    ,               shift and go to state 92


state 72

    (68) elems -> ' . Id '

    Id              shift and go to state 93


state 73

    (70) elems -> Chars .

    ]               reduce using rule 70 (elems -> Chars .)
    ,               reduce using rule 70 (elems -> Chars .)
    )               reduce using rule 70 (elems -> Chars .)


state 74

    (53) dic -> { Empty . }

    }               shift and go to state 94


state 75

    (54) dic -> { conj . }
    (59) conj -> conj . , Value : Value
    (60) conj -> conj . , Chars : Chars
    (61) conj -> conj . , Value : Chars
    (62) conj -> conj . , Chars : Value

    }               shift and go to state 95
    ,               shift and go to state 96


state 76

    (55) conj -> Value . : Value
    (57) conj -> Value . : Chars

    :               shift and go to state 97


state 77

    (56) conj -> Chars . : Chars
    (58) conj -> Chars . : Value

    :               shift and go to state 98


state 78

    (41) productions -> Id : production Info .

    Comment         reduce using rule 41 (productions -> Id : production Info .)
    $end            reduce using rule 41 (productions -> Id : production Info .)


state 79

    (63) production -> < items . >
    (65) items -> items . Id
    (67) items -> items . Chars

    >               shift and go to state 99
    Id              shift and go to state 100
    Chars           shift and go to state 101


state 80

    (64) items -> Id .

    >               reduce using rule 64 (items -> Id .)
    Id              reduce using rule 64 (items -> Id .)
    Chars           reduce using rule 64 (items -> Id .)


state 81

    (66) items -> Chars .

    >               reduce using rule 66 (items -> Chars .)
    Id              reduce using rule 66 (items -> Chars .)
    Chars           reduce using rule 66 (items -> Chars .)


state 82

    (52) regexTuple -> ( ' . Id ' , Tvalue )

    Id              shift and go to state 102


state 83

    (37) reservedFunctions -> Error Info END .

    Comment         reduce using rule 37 (reservedFunctions -> Error Info END .)
    $end            reduce using rule 37 (reservedFunctions -> Error Info END .)


state 84

    (47) listOfTuples -> [ precs . ]
    (49) precs -> precs . , ( tupleforPrec )

    ]               shift and go to state 103
    ,               shift and go to state 104


state 85

    (48) precs -> ( . tupleforPrec )
    (50) tupleforPrec -> . ' Left ' , elems
    (51) tupleforPrec -> . ' Right ' , elems

    '               shift and go to state 106

    tupleforPrec                   shift and go to state 105

state 86

    (23) exp -> exp + Value .

    +               reduce using rule 23 (exp -> exp + Value .)
    -               reduce using rule 23 (exp -> exp + Value .)
    /               reduce using rule 23 (exp -> exp + Value .)
    *               reduce using rule 23 (exp -> exp + Value .)
    Comment         reduce using rule 23 (exp -> exp + Value .)
    $end            reduce using rule 23 (exp -> exp + Value .)


state 87

    (24) exp -> exp - Value .

    +               reduce using rule 24 (exp -> exp - Value .)
    -               reduce using rule 24 (exp -> exp - Value .)
    /               reduce using rule 24 (exp -> exp - Value .)
    *               reduce using rule 24 (exp -> exp - Value .)
    Comment         reduce using rule 24 (exp -> exp - Value .)
    $end            reduce using rule 24 (exp -> exp - Value .)


state 88

    (25) exp -> exp / Value .

    +               reduce using rule 25 (exp -> exp / Value .)
    -               reduce using rule 25 (exp -> exp / Value .)
    /               reduce using rule 25 (exp -> exp / Value .)
    *               reduce using rule 25 (exp -> exp / Value .)
    Comment         reduce using rule 25 (exp -> exp / Value .)
    $end            reduce using rule 25 (exp -> exp / Value .)


state 89

    (26) exp -> exp * Value .

    +               reduce using rule 26 (exp -> exp * Value .)
    -               reduce using rule 26 (exp -> exp * Value .)
    /               reduce using rule 26 (exp -> exp * Value .)
    *               reduce using rule 26 (exp -> exp * Value .)
    Comment         reduce using rule 26 (exp -> exp * Value .)
    $end            reduce using rule 26 (exp -> exp * Value .)


state 90

    (45) list -> [ Empty ] .

    Comment         reduce using rule 45 (list -> [ Empty ] .)
    $end            reduce using rule 45 (list -> [ Empty ] .)


state 91

    (46) list -> [ elems ] .

    Comment         reduce using rule 46 (list -> [ elems ] .)
    $end            reduce using rule 46 (list -> [ elems ] .)


state 92

    (69) elems -> elems , . ' Id '
    (71) elems -> elems , . Chars

    '               shift and go to state 107
    Chars           shift and go to state 108


state 93

    (68) elems -> ' Id . '

    '               shift and go to state 109


state 94

    (53) dic -> { Empty } .

    Comment         reduce using rule 53 (dic -> { Empty } .)
    $end            reduce using rule 53 (dic -> { Empty } .)


state 95

    (54) dic -> { conj } .

    Comment         reduce using rule 54 (dic -> { conj } .)
    $end            reduce using rule 54 (dic -> { conj } .)


state 96

    (59) conj -> conj , . Value : Value
    (60) conj -> conj , . Chars : Chars
    (61) conj -> conj , . Value : Chars
    (62) conj -> conj , . Chars : Value

    Value           shift and go to state 110
    Chars           shift and go to state 111


state 97

    (55) conj -> Value : . Value
    (57) conj -> Value : . Chars

    Value           shift and go to state 112
    Chars           shift and go to state 113


state 98

    (56) conj -> Chars : . Chars
    (58) conj -> Chars : . Value

    Chars           shift and go to state 114
    Value           shift and go to state 115


state 99

    (63) production -> < items > .

    Info            reduce using rule 63 (production -> < items > .)
    Comment         reduce using rule 63 (production -> < items > .)
    $end            reduce using rule 63 (production -> < items > .)


state 100

    (65) items -> items Id .

    >               reduce using rule 65 (items -> items Id .)
    Id              reduce using rule 65 (items -> items Id .)
    Chars           reduce using rule 65 (items -> items Id .)


state 101

    (67) items -> items Chars .

    >               reduce using rule 67 (items -> items Chars .)
    Id              reduce using rule 67 (items -> items Chars .)
    Chars           reduce using rule 67 (items -> items Chars .)


state 102

    (52) regexTuple -> ( ' Id . ' , Tvalue )

    '               shift and go to state 116


state 103

    (47) listOfTuples -> [ precs ] .

    Comment         reduce using rule 47 (listOfTuples -> [ precs ] .)
    $end            reduce using rule 47 (listOfTuples -> [ precs ] .)


state 104

    (49) precs -> precs , . ( tupleforPrec )

    (               shift and go to state 117


state 105

    (48) precs -> ( tupleforPrec . )

    )               shift and go to state 118


state 106

    (50) tupleforPrec -> ' . Left ' , elems
    (51) tupleforPrec -> ' . Right ' , elems

    Left            shift and go to state 119
    Right           shift and go to state 120


state 107

    (69) elems -> elems , ' . Id '

    Id              shift and go to state 121


state 108

    (71) elems -> elems , Chars .

    ]               reduce using rule 71 (elems -> elems , Chars .)
    ,               reduce using rule 71 (elems -> elems , Chars .)
    )               reduce using rule 71 (elems -> elems , Chars .)


state 109

    (68) elems -> ' Id ' .

    ]               reduce using rule 68 (elems -> ' Id ' .)
    ,               reduce using rule 68 (elems -> ' Id ' .)
    )               reduce using rule 68 (elems -> ' Id ' .)


state 110

    (59) conj -> conj , Value . : Value
    (61) conj -> conj , Value . : Chars

    :               shift and go to state 122


state 111

    (60) conj -> conj , Chars . : Chars
    (62) conj -> conj , Chars . : Value

    :               shift and go to state 123


state 112

    (55) conj -> Value : Value .

    }               reduce using rule 55 (conj -> Value : Value .)
    ,               reduce using rule 55 (conj -> Value : Value .)


state 113

    (57) conj -> Value : Chars .

    }               reduce using rule 57 (conj -> Value : Chars .)
    ,               reduce using rule 57 (conj -> Value : Chars .)


state 114

    (56) conj -> Chars : Chars .

    }               reduce using rule 56 (conj -> Chars : Chars .)
    ,               reduce using rule 56 (conj -> Chars : Chars .)


state 115

    (58) conj -> Chars : Value .

    }               reduce using rule 58 (conj -> Chars : Value .)
    ,               reduce using rule 58 (conj -> Chars : Value .)


state 116

    (52) regexTuple -> ( ' Id ' . , Tvalue )

    ,               shift and go to state 124


state 117

    (49) precs -> precs , ( . tupleforPrec )
    (50) tupleforPrec -> . ' Left ' , elems
    (51) tupleforPrec -> . ' Right ' , elems

    '               shift and go to state 106

    tupleforPrec                   shift and go to state 125

state 118

    (48) precs -> ( tupleforPrec ) .

    ]               reduce using rule 48 (precs -> ( tupleforPrec ) .)
    ,               reduce using rule 48 (precs -> ( tupleforPrec ) .)


state 119

    (50) tupleforPrec -> ' Left . ' , elems

    '               shift and go to state 126


state 120

    (51) tupleforPrec -> ' Right . ' , elems

    '               shift and go to state 127


state 121

    (69) elems -> elems , ' Id . '

    '               shift and go to state 128


state 122

    (59) conj -> conj , Value : . Value
    (61) conj -> conj , Value : . Chars

    Value           shift and go to state 129
    Chars           shift and go to state 130


state 123

    (60) conj -> conj , Chars : . Chars
    (62) conj -> conj , Chars : . Value

    Chars           shift and go to state 131
    Value           shift and go to state 132


state 124

    (52) regexTuple -> ( ' Id ' , . Tvalue )

    Tvalue          shift and go to state 133


state 125

    (49) precs -> precs , ( tupleforPrec . )

    )               shift and go to state 134


state 126

    (50) tupleforPrec -> ' Left ' . , elems

    ,               shift and go to state 135


state 127

    (51) tupleforPrec -> ' Right ' . , elems

    ,               shift and go to state 136


state 128

    (69) elems -> elems , ' Id ' .

    ]               reduce using rule 69 (elems -> elems , ' Id ' .)
    ,               reduce using rule 69 (elems -> elems , ' Id ' .)
    )               reduce using rule 69 (elems -> elems , ' Id ' .)


state 129

    (59) conj -> conj , Value : Value .

    }               reduce using rule 59 (conj -> conj , Value : Value .)
    ,               reduce using rule 59 (conj -> conj , Value : Value .)


state 130

    (61) conj -> conj , Value : Chars .

    }               reduce using rule 61 (conj -> conj , Value : Chars .)
    ,               reduce using rule 61 (conj -> conj , Value : Chars .)


state 131

    (60) conj -> conj , Chars : Chars .

    }               reduce using rule 60 (conj -> conj , Chars : Chars .)
    ,               reduce using rule 60 (conj -> conj , Chars : Chars .)


state 132

    (62) conj -> conj , Chars : Value .

    }               reduce using rule 62 (conj -> conj , Chars : Value .)
    ,               reduce using rule 62 (conj -> conj , Chars : Value .)


state 133

    (52) regexTuple -> ( ' Id ' , Tvalue . )

    )               shift and go to state 137


state 134

    (49) precs -> precs , ( tupleforPrec ) .

    ]               reduce using rule 49 (precs -> precs , ( tupleforPrec ) .)
    ,               reduce using rule 49 (precs -> precs , ( tupleforPrec ) .)


state 135

    (50) tupleforPrec -> ' Left ' , . elems
    (68) elems -> . ' Id '
    (69) elems -> . elems , ' Id '
    (70) elems -> . Chars
    (71) elems -> . elems , Chars

    '               shift and go to state 72
    Chars           shift and go to state 73

    elems                          shift and go to state 138

state 136

    (51) tupleforPrec -> ' Right ' , . elems
    (68) elems -> . ' Id '
    (69) elems -> . elems , ' Id '
    (70) elems -> . Chars
    (71) elems -> . elems , Chars

    '               shift and go to state 72
    Chars           shift and go to state 73

    elems                          shift and go to state 139

state 137

    (52) regexTuple -> ( ' Id ' , Tvalue ) .

    Comment         reduce using rule 52 (regexTuple -> ( ' Id ' , Tvalue ) .)
    $end            reduce using rule 52 (regexTuple -> ( ' Id ' , Tvalue ) .)


state 138

    (50) tupleforPrec -> ' Left ' , elems .
    (69) elems -> elems . , ' Id '
    (71) elems -> elems . , Chars

    )               reduce using rule 50 (tupleforPrec -> ' Left ' , elems .)
    ,               shift and go to state 92


state 139

    (51) tupleforPrec -> ' Right ' , elems .
    (69) elems -> elems . , ' Id '
    (71) elems -> elems . , Chars

    )               reduce using rule 51 (tupleforPrec -> ' Right ' , elems .)
    ,               shift and go to state 92

